version: '3.8'

services:
  etl:
    build:
      context: ./elastic
      dockerfile: Dockerfile
    container_name: etl
    restart: always
    env_file:
      - .env
    depends_on:
      - theatre-db
      - elasticsearch
      - redis
    networks:
      - movies-net

  fastapi1:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: searchapi_1
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - etl
      - redis
      - theatre-db
      - jaeger
      - kafka-0
    networks:
      - movies-net
      - movies-net-outside

  fastapi2:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: searchapi_2
    ports:
      - "8081:8080"
    env_file:
      - .env
    depends_on:
      - etl
      - redis
      - theatre-db
      - jaeger
      - kafka-0
    networks:
      - movies-net
      - movies-net-outside

  fastapi_auth1:
    build:
      context: ./fastapi_auth
      dockerfile: Dockerfile
    container_name: authapi_1
    ports:
      - "8070:8070"
    env_file:
      - .env
    depends_on:
      - etl
      - redis
      - theatre-db
      - jaeger
      - kafka-0
    networks:
      - movies-net
      - movies-net-outside

  # fastapi_auth2:
  #   build:
  #     context: ./fastapi_auth
  #     dockerfile: Dockerfile
  #   container_name: authapi_2
  #   ports:
  #     - "8071:8070"
  #   env_file:
  #     - .env
  #   depends_on:
  #     - etl
  #     - redis
  #     - theatre-db
  #     - jaeger
      # - kafka-0
  #   networks:
  #     - movies-net
        # - movies-net-outside

  redis:
    image: redislabs/redismod:latest
    container_name: redis
    expose:
      - "6379"
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - movies-net

  elasticsearch:
    image: elasticsearch:8.7.0
    container_name: elasticsearch
    restart: always
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms200m -Xmx200m
    depends_on:
      - theatre-db
    ports:
      - "9200:9200"
    networks:
      - movies-net

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
    depends_on:
      - flask
      - fastapi1
      - fastapi2
      - fastapi_auth1
      # - fastapi_auth2
    ports:
      - "80:80"
    networks:
      - movies-net
      - movies-net-outside

  theatre-db:
    image: postgres:16
    container_name: theatre-db
    ports:
      - "5432:5432"
    env_file:
      - .env
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - movies-net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "14268:14268"
      - "16686:16686"
    networks:
      - movies-net

  kafka-0:
    image: bitnami/kafka:3.4
    container_name: kafka-0
    ports:
      - "9094:9094"
    env_file:
      - .env
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
    volumes:
      - kafka_0_data:/bitnami/kafka
    networks:
      - movies-net


  kafka-1:
    image: bitnami/kafka:3.4
    container_name: kafka-1
    ports:
      - "9095:9095"
    env_file:
      - .env
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
    volumes:
      - kafka_1_data:/bitnami/kafka
    networks:
      - movies-net

  kafka-2:
    image: bitnami/kafka:3.4
    container_name: kafka-2
    ports:
      - "9096:9096"
    env_file:
      - .env
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
    volumes:
      - kafka_2_data:/bitnami/kafka
    networks:
      - movies-net

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.0
    container_name: kafka-ui
    ports:
      - "8050:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft
    networks:
      - movies-net

  rabbitmq:
    image: rabbitmq:4.0.7-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    networks:
      - movies-net

  flask:
    build:
      context: ./flask
      dockerfile: Dockerfile
    container_name: flask
    ports:
      - "5000:5000"
    env_file:
      - .env
    networks:
      - movies-net
      - movies-net-outside

networks:
  movies-net:
    driver: bridge

  movies-net-outside:
    driver: bridge
    internal: false

volumes:
  postgres_data:
  elasticsearch:
  redis_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:
